{"version":3,"sources":["node_modules/rusty-rogue-wasm/rusty_rogue_wasm_bg.js","node_modules/rusty-rogue-wasm/rusty_rogue_wasm.js","index.js"],"names":["lTextDecoder","TextDecoder","module","require","cachedTextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","memory","Uint8Array","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","dropObject","takeObject","ret","greet","WASM_VECTOR_LEN","lTextEncoder","TextEncoder","cachedTextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","passStringToWasm0","malloc","realloc","mem","offset","code","charCodeAt","slice","dbg_print","msg","ptr0","__wbindgen_malloc","__wbindgen_realloc","len0","cachegetInt32Memory0","getInt32Memory0","Int32Array","TileType","Object","freeze","Wall","Floor","Map","__wrap","create","prototype","free","__wbg_map_free","width","map_width","height","map_height","get_tiles","map_get_tiles","new","map_new","render","map_render","r0","r1","__wbindgen_free","tick","map_tick","__wbindgen_string_new","arg0","arg1","__wbg_alert_5706036d1ab93680","alert","__wbindgen_object_drop_ref","__wbg_new_59cb74e423758ede","Error","__wbg_stack_558ba5917b466edd","stack","__wbg_error_4bb6c2a97407129a","console","error","__wbg_log_d85e484a8ba03c98","log","__wbindgen_throw","init","load","imports","Response","WebAssembly","instantiateStreaming","e","headers","get","warn","bytes","arrayBuffer","instantiate","instance","Instance","input","import","meta","url","replace","wbg","Request","URL","fetch","exports","__wbindgen_wasm_module","TILE_SIZE","GRID_COLOR","FLOOR_COLOR","WALL_COLOR","MAP_WIDTH","MAP_HEIGHT","map","canvas","document","getElementById","ctx","getContext","renderLoop","drawTiles","requestAnimationFrame","drawGrid","beginPath","strokeStyle","moveTo","lineTo","stroke","getIndex","row","column","tilesPtr","tiles","col","fillStyle","fillRect"],"mappings":"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","file":"www.3315fc15.js","sourceRoot":"..\\www","sourcesContent":["import * as wasm from './rusty_rogue_wasm_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n*/\nexport function greet() {\n    wasm.greet();\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n* @param {string} msg\n*/\nexport function dbg_print(msg) {\n    var ptr0 = passStringToWasm0(msg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.dbg_print(ptr0, len0);\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n/**\n*/\nexport const TileType = Object.freeze({ Wall:0,Floor:1, });\n/**\n*/\nexport class Map {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Map.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_map_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        var ret = wasm.map_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        var ret = wasm.map_height(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_tiles() {\n        var ret = wasm.map_get_tiles(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Map}\n    */\n    static new(width, height) {\n        var ret = wasm.map_new(width, height);\n        return Map.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    render() {\n        try {\n            wasm.map_render(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    */\n    tick() {\n        wasm.map_tick(this.ptr);\n    }\n}\n\nexport const __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport const __wbg_alert_5706036d1ab93680 = function(arg0, arg1) {\n    alert(getStringFromWasm0(arg0, arg1));\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport const __wbg_log_d85e484a8ba03c98 = function(arg0) {\n    console.log(getObject(arg0));\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","\nlet wasm;\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n*/\nexport function greet() {\n    wasm.greet();\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n* @param {string} msg\n*/\nexport function dbg_print(msg) {\n    var ptr0 = passStringToWasm0(msg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.dbg_print(ptr0, len0);\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n/**\n*/\nexport const TileType = Object.freeze({ Wall:0,Floor:1, });\n/**\n*/\nexport class Map {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Map.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_map_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        var ret = wasm.map_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        var ret = wasm.map_height(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_tiles() {\n        var ret = wasm.map_get_tiles(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Map}\n    */\n    static new(width, height) {\n        var ret = wasm.map_new(width, height);\n        return Map.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    render() {\n        try {\n            wasm.map_render(8, this.ptr);\n            var r0 = getInt32Memory0()[8 / 4 + 0];\n            var r1 = getInt32Memory0()[8 / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    */\n    tick() {\n        wasm.map_tick(this.ptr);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = import.meta.url.replace(/\\.js$/, '_bg.wasm');\n    }\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        var ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_alert_5706036d1ab93680 = function(arg0, arg1) {\n        alert(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_new_59cb74e423758ede = function() {\n        var ret = new Error();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n        var ret = getObject(arg1).stack;\n        var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n        try {\n            console.error(getStringFromWasm0(arg0, arg1));\n        } finally {\n            wasm.__wbindgen_free(arg0, arg1);\n        }\n    };\n    imports.wbg.__wbg_log_d85e484a8ba03c98 = function(arg0) {\n        console.log(getObject(arg0));\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    const { instance, module } = await load(await input, imports);\n\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n\n    return wasm;\n}\n\nexport default init;\n\n","// Import the WebAssembly memory at the top of the file.\r\nimport { memory } from \"rusty-rogue-wasm/rusty_rogue_wasm_bg\";\r\n//import * as wasm from \"hello-wasm-pack\";\r\nimport { Map, TileType } from \"rusty-rogue-wasm\";\r\n\r\n// Display deetz\r\nconst TILE_SIZE = 16; // px\r\nconst GRID_COLOR = \"#CCCCCC\";\r\nconst FLOOR_COLOR = \"#FFFFFF\";\r\nconst WALL_COLOR = \"#000000\";\r\n\r\n// Init map\r\nconst MAP_WIDTH = 32;\r\nconst MAP_HEIGHT = 16;\r\nconst map = Map.new(MAP_WIDTH, MAP_HEIGHT);\r\n\r\n// setup canvas\r\nconst canvas = document.getElementById(\"game-canvas\");\r\ncanvas.height = (TILE_SIZE + 1) * MAP_HEIGHT + 1;\r\ncanvas.width = (TILE_SIZE + 1) * MAP_WIDTH + 1;\r\nconst ctx = canvas.getContext('2d');\r\n\r\n\r\n\r\nconst renderLoop = () => {\r\n\r\n    // map.Tick();\r\n\r\n    //drawGrid();\r\n    drawTiles();\r\n\r\n\r\n    requestAnimationFrame(renderLoop);\r\n\r\n}\r\n\r\nconst drawGrid = () => {\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = GRID_COLOR;\r\n\r\n    // just draw around outside for now\r\n\r\n    // top\r\n    ctx.moveTo(0, 0);\r\n    ctx.lineTo(MAP_WIDTH, 0);\r\n\r\n    // bottom\r\n    ctx.moveTo(0, MAP_HEIGHT);\r\n    ctx.lineTo(MAP_WIDTH, MAP_HEIGHT);\r\n\r\n    // left\r\n    ctx.moveTo(0, 0);\r\n    ctx.lineTo(0, MAP_HEIGHT);\r\n\r\n    //right\r\n    ctx.moveTo(MAP_WIDTH, 0);\r\n    ctx.lineTo(MAP_WIDTH, MAP_HEIGHT);\r\n\r\n    ctx.stroke();\r\n};\r\n\r\n\r\nconst getIndex = (row, column) => {\r\n    return row * MAP_WIDTH + column;\r\n};\r\n\r\n\r\nconst drawTiles = () => {\r\n    const tilesPtr = map.get_tiles();\r\n    const tiles = new Uint8Array(memory.buffer, tilesPtr, MAP_WIDTH * MAP_HEIGHT);\r\n\r\n    ctx.beginPath();\r\n\r\n    for (let row = 0; row < MAP_HEIGHT; row++) {\r\n        for (let col = 0; col < MAP_WIDTH; col++) {\r\n            const idx = getIndex(row, col);\r\n\r\n            ctx.fillStyle = tiles[idx] === TileType.Floor\r\n                ? FLOOR_COLOR\r\n                : WALL_COLOR;\r\n\r\n            ctx.fillRect(\r\n                col * (TILE_SIZE + 1) + 1,\r\n                row * (TILE_SIZE + 1) + 1,\r\n                TILE_SIZE,\r\n                TILE_SIZE\r\n            );\r\n        }\r\n    }\r\n\r\n    ctx.stroke();\r\n};\r\n\r\n\r\n\r\nrequestAnimationFrame(renderLoop);\r\n\r\n"]}